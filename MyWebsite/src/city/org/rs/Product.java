package city.org.rs;

public class Product {
	private int id;
	private String name;
	private float price;

	//Constructor 1
	public Product(int id) {
		this.id = id;
	}

	//Constructor 2
	public Product() {
	}

	//Constructor 3
	public Product(int id, String name, float price) {
		this.id = id;
		this.name = name;
		this.price = price;
	}

	//Getters
	public int getId() {
		return id;
	}
	
	public String getName() {
		return name;
	}
	
	public float getPrice() {
		return price;
	}

	//Setters
	public void setId(int id) {
		this.id = id;
	}

	
	public void setName(String name) {
		this.name = name;
	}


	public void setPrice(float price) {
		this.price = price;
	}
	
	
	/* NOTE:
	 * ----
	 * The two methods below are override implementations for the equals() and hashcode() methods.
	 * These two methods belong to the generic Object class and are inherited by all java objects.
	 * These two methods are generally used in various operations when working with the Java Collection framework  
	 * and its various interfaces (List, Set, Queue, Deque) and classes (ArrayList, LinkedList, HashSet, etc.).
	 * For instance, in our case, the equals() method is used by the contains() method which is in turn used (implicitly) by 
	 * the indexOf() and remove() methods which are called by the DAO methods get(int id), delete(int id) and update(Product product). 
	 * If the below implementation for equals() is absent, the aforementioned DAO methods raise exceptions as they have no way 
	 * of semantically comparing two objects of the Product class and determining their
	 * equality (and therefore the indexOf() method cannot determine whether a given object is on the list).
	 * 
	 * NOTE 1: Any override implementation of the equals() method MAY have to be accompanied by a corresponding override implementation of the 
	 * the hashcode() method as the former MAY use the latter as part of the equality check in certain Java collections such as HashSet and HashMap
	 * 
	 * NOTE 2: The override implementations below are auto-generated by Eclipse
	 * 
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) // checks if obj and 'this' are at the same memory location
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass()) //checks if obj and 'this' are instantiated from the same class
			return false;
		Product other = (Product) obj; 
		if (id != other.id) //checks if obj and 'this' have the same id
			return false;
		return true;
	}
	
	/*
	@Override
	public int hashCode() {
		int prime = 31;
		int result = 1;
		result = prime * result + id;
		return result;
	}	
	*/
}